## Auto-generated
cmake_minimum_required(VERSION 3.0.0)
# project(argos VERSION 0.1.0)

## Generated by the king of cmakes :crown:
project(argos VERSION 1.0.0)
project(shutdown VERSION 1.0.0)

## Auto-generated
include(CTest)
enable_testing()

## Generated by the king of cmakes :crown:
set (HOME $ENV{HOME})
# Definition of individual libraries/executables
add_library(camera core/camera/camera.cpp)
add_library(log core/log/log.cpp)
# add_library(machine_learning core/machine_learning/machine_learning.cpp)
add_library(network core/network/wifi.cpp)
add_library(threads core/threads/threads.cpp core/threads/camera_control.cpp 
	core/threads/cloud.cpp core/threads/database.cpp 
	core/threads/main.cpp core/threads/ml_inference.cpp
	core/threads/remote_client.cpp)
add_executable(argos argos.cpp)

# Include directories for each library/executable
target_include_directories(argos PUBLIC ${CMAKE_SOURCE_DIR}/core/camera ${CMAKE_SOURCE_DIR}/core/threads)
TARGET_LINK_LIBRARIES(argos pthread)

# Require Python Libraries 
find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})
target_link_libraries(argos ${PYTHON_LIBRARIES})

target_include_directories(argos PUBLIC ${CMAKE_SOURCE_DIR}/core/threads)
target_include_directories(camera PUBLIC ${CMAKE_SOURCE_DIR}/core/log)
target_include_directories(threads PUBLIC ${CMAKE_SOURCE_DIR}/threads ${CMAKE_SOURCE_DIR}/core/log)
target_link_libraries(argos log camera network threads pthread) #machine_learning

add_executable(shutdown daemon/shutdown.cpp)
# target_include_directories(shutdown PUBLIC ${CMAKE_SOURCE_DIR}/daemon/)
target_include_directories(shutdown PUBLIC ${CMAKE_SOURCE_DIR}/daemon/ ${CMAKE_SOURCE_DIR}/core/threads ${CMAKE_SOURCE_DIR}/core/camera)
target_link_libraries(shutdown log camera network threads pthread)

# Require Python Libraries 
find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})
target_link_libraries(shutdown ${PYTHON_LIBRARIES})

# add_library( tflite SHARED IMPORTED )
# set_target_properties( tflite PROPERTIES IMPORTED_LOCATION ${HOME}/Desktop/rasp-tf/tensorflow_src/tensorflow/lite/tools/make/gen/linux_x86_64/lib/libtensorflow-lite )
LINK_DIRECTORIES(${HOME}/Desktop/rasp-tf/tensorflow_src/tensorflow/lite/tools/make/gen/linux_x86_64/lib/)
add_executable(machine_learning core/machine_learning/machine_learning.cpp)
# target_link_libraries(machine_learning ${HOME}/Desktop/rasp-tf/tensorflow_src/tensorflow/lite/tools/make/gen/linux_x86_64/lib/libtensorflow-lite)
target_include_directories(machine_learning PUBLIC ${HOME}/Desktop/rasp-tf/tensorflow_src \ 
	${HOME}/Desktop/rasp-tf/tensorflow_src/tensorflow/lite/tools/make/downloads/flatbuffers/include ${HOME}/Desktop/rasp-tf/tensorflow_src/tensorflow/lite/tools/make/downloads/absl ${HOME}/Desktop/rasp-tf/tensorflow_src/tensorflow/lite/tools/make/downloads/eigen)
TARGET_LINK_LIBRARIES(machine_learning libtensorflow-lite.a pthread)
target_compile_options(machine_learning PRIVATE -Wall -Wextra)

## Auto-generated
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
